{
  "comments": [
    {
      "key": {
        "uuid": "ee6b482f_29971774",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-07T21:49:10Z",
      "side": 1,
      "message": "I really hate this hard-coded buffer, should we actually implement ERANGE case?",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee6b482f_848e321f",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-04-07T22:05:59Z",
      "side": 1,
      "message": "I hate it too :-( and I wrote it ;-\u003e but the good news is by having uid \u003c AID_APP [((uid % AID_USER) \u003c AID_APP) not so much] you will never exceed the longest name in android_ids (or in /system/etc/passwd when implemented).\n\nBravery? calloc might be our friend here? You can calloc 8MB, every one of them point to the zero page until a COW happens when it is written.\n\n@bdc@ is there a limit in Android user id naming, or is packagelist (representing a possible future) basically unlimited?",
      "parentUuid": "ee6b482f_29971774",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee6b482f_04f6c2eb",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-07T22:52:48Z",
      "side": 1,
      "message": "If packaglist is integrated, homedir would include the pkgname which is super long, also at that point wouldn\u0027t name be the pkgname? Not this app_ stuff?",
      "parentUuid": "ee6b482f_848e321f",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee6b482f_a4ddee5e",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-04-07T22:57:09Z",
      "side": 1,
      "message": "That is the expectation ...\n\npackage list might be a pie in the sky, a stretch goal.\n\nThe _real_ enhancement is the parse of /system/etc/passwd; where we can enforce maximums in generating it, and in parsing it.",
      "parentUuid": "ee6b482f_04f6c2eb",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee6b482f_0f117b76",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-04-07T23:46:25Z",
      "side": 1,
      "message": "this is Android-only code, so take advantage of the fact that our getpwuid is safe. *this* is why we made it safe --- because all the other choices are terrible and verbose and hard to write.",
      "parentUuid": "ee6b482f_a4ddee5e",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee6b482f_8fb2cbc1",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-04-07T23:48:58Z",
      "side": 1,
      "message": "I will defer to enh@ judgement, will redo logd CL tomorrow to use getpwuid as well. Thanks.",
      "parentUuid": "ee6b482f_0f117b76",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee6b482f_cab03153",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-08T03:48:05Z",
      "side": 1,
      "message": "This code is thread safe, I don\u0027t want to implement anything that isn\u0027t we made sure to use strtok_r, etc. Also, I know of OEMS that use these calls, and their code may be threaded.\n\nIll defer to what Nick wants, but I think sds would want to keep this thread safe. I\u0027d like to get him to weigh in since the bulk of this code was authored by him.",
      "parentUuid": "ee6b482f_0f117b76",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee6b482f_2aa8e5e1",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-08T03:51:51Z",
      "side": 1,
      "message": "@enh This re-entrant version takes the cake for shudder factor, the fact the caller has to guess the buffer size is unreal. I should be able to pass NULL and it tell me the size (granted the file could change underneath me), it would be slightly better or better yet, just malloc up he struct and give me a free routine... legacy is fun. I really hope we can use the gecos field!",
      "parentUuid": "ee6b482f_cab03153",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee42682f_31d1c818",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-04-08T18:24:37Z",
      "side": 1,
      "message": "\u003e This code is thread safe, I don\u0027t want to implement anything that isn\u0027t we made sure to use strtok_r, etc. Also, I know of OEMS that use these calls, and their code may be threaded.\n\nyou\u0027re missing the point... this code is Android-only. only Android, getpwuid (and friends) are all thread-safe. the simple, obvious, clean code is correct and thread-safe on Android. you\u0027re just adding places for bugs to hide here.",
      "parentUuid": "ee6b482f_2aa8e5e1",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee42682f_51549446",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-08T18:30:08Z",
      "side": 1,
      "message": "I did miss the point, If I can just assume that our version is thread safe (which I initially was doing), I will use it, but Mark was against that. Just let me know, I prefer the simpler version myself.\n\nIf not, I will change this to malloc() up a buffer based on ERANGE.",
      "parentUuid": "ee42682f_31d1c818",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee42682f_b17138e2",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-04-08T18:37:32Z",
      "side": 1,
      "message": "bionic\u0027s version is thread safe, and will always be so, specifically so folks don\u0027t have to write more/worse code to do simple things like this.",
      "parentUuid": "ee42682f_51549446",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee42682f_71f5106d",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-08T18:42:06Z",
      "side": 1,
      "message": "So just to be crystal clear, restore version 1 of this patch? (I think modified with a big fat comment on it)\n\nAlso, is this the guidance I should follow on all android specific code like liblog/logprint.c?",
      "parentUuid": "ee42682f_b17138e2",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee42682f_71a35071",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 576,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-04-08T18:47:06Z",
      "side": 1,
      "message": "yes. the only place it gets interesting is if you have code that runs on the host too, where you\u0027re using glibc or whatever the Mac libc is called (or even running on Windows!). but for code that only runs on Android, yes.",
      "parentUuid": "ee42682f_71f5106d",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee6b482f_2970f714",
        "filename": "src/android.c",
        "patchSetId": 3
      },
      "lineNbr": 592,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-04-07T21:49:10Z",
      "side": 1,
      "message": "Maybe this is more readable then LOGD?\npwd \u003d NULL;\nrc \u003d getpwduid_r();\nif (rc || !pwd)\n  goto err;",
      "revId": "7711addc3100894e6f572a4e04c974e64bdd44ce",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}